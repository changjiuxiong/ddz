!function(g){var I={};function C(A){if(I[A])return I[A].exports;var t=I[A]={i:A,l:!1,exports:{}};return g[A].call(t.exports,t,t.exports,C),t.l=!0,t.exports}C.m=g,C.c=I,C.d=function(g,I,A){C.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:A})},C.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},C.t=function(g,I){if(1&I&&(g=C(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var A=Object.create(null);if(C.r(A),Object.defineProperty(A,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var t in g)C.d(A,t,function(I){return g[I]}.bind(null,t));return A},C.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return C.d(I,"a",I),I},C.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},C.p="",C(C.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/Poker.js\nclass Poker{\r\n    constructor(param) {\r\n        if(param.text){\r\n            this.text = param.text;\r\n            this.number = Poker.textToNumber(param.text);\r\n        }else{\r\n            this.number = param.number;\r\n            this.text = Poker.numberToText(param.number);\r\n        }\r\n        this.type = param.type;\r\n    }\r\n\r\n    static textToNumber(text){\r\n        switch (text) {\r\n            case '3': return 3;\r\n            case '4': return 4;\r\n            case '5': return 5;\r\n            case '6': return 6;\r\n            case '7': return 7;\r\n            case '8': return 8;\r\n            case '9': return 9;\r\n            case '10':\r\n            case '0':\r\n            case 'T':\r\n            case 't': return 10;\r\n            case '11':\r\n            case 'j':\r\n            case 'J': return 11;\r\n            case '12':\r\n            case 'q':\r\n            case 'Q': return 12;\r\n            case '13':\r\n            case 'k':\r\n            case 'K': return 13;\r\n            case '1':\r\n            case 'a':\r\n            case 'A': return 14;\r\n            case '2': return 15;\r\n            case 's':\r\n            case 'S': return 16;\r\n            case 'x':\r\n            case 'X': return 17;\r\n        }\r\n    }\r\n\r\n    static numberToText(number){\r\n        switch (number) {\r\n            case 3: return '3';\r\n            case 4: return '4';\r\n            case 5: return '5';\r\n            case 6: return '6';\r\n            case 7: return '7';\r\n            case 8: return '8';\r\n            case 9: return '9';\r\n            case 10: return '10';\r\n            case 11: return 'J';\r\n            case 12: return 'Q';\r\n            case 13: return 'K';\r\n            case 14: return 'A';\r\n            case 15: return '2';\r\n            case 16: return 'S';\r\n            case 17: return 'X';\r\n        }\r\n    }\r\n\r\n    static sortFunction(a, b){\r\n        return a.number - b.number;\r\n    }\r\n\r\n    static getObjByPokerList(pokerList){\r\n        if(pokerList[0] === 'pass'){\r\n            return {\r\n                type:'pass',\r\n                poker: pokerList,\r\n            };\r\n        }\r\n        pokerList.sort(Poker.sortFunction);\r\n\r\n        let lastPoker = pokerList[0];\r\n        let curList = [lastPoker];\r\n        let lists = [];\r\n        for(let i=1; i<pokerList.length; i++){\r\n            if(pokerList[i].number !== lastPoker.number){\r\n                lists.push(curList);\r\n                curList = [pokerList[i]];\r\n            }else{\r\n                curList.push(pokerList[i]);\r\n            }\r\n            lastPoker = pokerList[i];\r\n        }\r\n        lists.push(curList);\r\n\r\n        let Count1List = [];\r\n        let Count2List = [];\r\n        let Count3List = [];\r\n        let Count4List = [];\r\n        for(let i=0; i<lists.length; i++){\r\n            if(lists[i].length === 3){\r\n                Count3List.push(lists[i]);\r\n            }else if(lists[i].length === 2){\r\n                Count2List.push(lists[i]);\r\n            }else if(lists[i].length === 1){\r\n                Count1List.push(lists[i]);\r\n            }else if(lists[i].length === 4){\r\n                Count4List.push(lists[i]);\r\n            }\r\n        }\r\n\r\n        if(pokerList.length === 1){\r\n\r\n            return {\r\n                type:'one',\r\n                poker: pokerList,\r\n                one: pokerList,\r\n            };\r\n\r\n        }else if(pokerList.length === 2){\r\n\r\n            if(Count2List.length === 1){\r\n                return {\r\n                    type:'two',\r\n                    poker: pokerList,\r\n                    two: pokerList,\r\n                };\r\n            }else if(pokerList[0].number === 16 && pokerList[1].number === 17){\r\n                return {\r\n                    type:'sx',\r\n                    poker: pokerList,\r\n                    sx: pokerList,\r\n                };\r\n            }\r\n\r\n        }else if(pokerList.length === 4){\r\n\r\n            if(Count3List.length === 1){\r\n                return {\r\n                    type:'threeWithOne',\r\n                    poker: pokerList,\r\n                    three: Count3List[0],\r\n                    one: Count1List[0],\r\n                };\r\n            }else if(Count4List.length === 1){\r\n                return {\r\n                    type:'four',\r\n                    poker: pokerList,\r\n                    four: pokerList,\r\n                };\r\n            }\r\n\r\n        }else if(pokerList.length === 5){\r\n\r\n            if(Count3List.length === 1 && Count2List.length === 1){\r\n                return {\r\n                    type:'threeWithTwo',\r\n                    poker: pokerList,\r\n                    three: Count3List[0],\r\n                    two: Count2List[0],\r\n                };\r\n            }\r\n\r\n        }else if(pokerList.length === 8){\r\n\r\n            if(Count3List.length === 2 && Count3List[0][0].number+1===Count3List[1][0].number){\r\n                if(Count2List.length === 1){\r\n                    Count1List.push(Count2List[0].splice(0,1));\r\n                    Count1List.push(Count2List[0].splice(0,1));\r\n                }\r\n                return {\r\n                    type:'threeWithOneList',\r\n                    poker: pokerList,\r\n                    list: [\r\n                        {\r\n                            three: Count3List[0],\r\n                            one: Count1List[0],\r\n                        },\r\n                        {\r\n                            three: Count3List[1],\r\n                            one: Count1List[1],\r\n                        }\r\n                    ],\r\n                };\r\n            }\r\n\r\n        }else if(pokerList.length === 10){\r\n\r\n            if(Count3List.length === 2 && Count3List[0][0].number+1===Count3List[1][0].number && Count2List.length === 2){\r\n                return {\r\n                    type:'threeWithTwoList',\r\n                    poker: pokerList,\r\n                    list: [\r\n                        {\r\n                            three: Count3List[0],\r\n                            two: Count2List[0],\r\n                        },\r\n                        {\r\n                            three: Count3List[1],\r\n                            two: Count2List[1],\r\n                        }\r\n                    ],\r\n                };\r\n            }\r\n\r\n        }\r\n\r\n        //判断oneList\r\n        if(pokerList.length >= 5 && Count1List.length === pokerList.length && pokerList[0].number+pokerList.length-1===pokerList[pokerList.length-1].number){\r\n            return {\r\n                type:'oneList',\r\n                poker: pokerList,\r\n                list: Count1List.map(function (item) {\r\n                    return {\r\n                        one: item,\r\n                    }\r\n                }),\r\n            }\r\n        }\r\n\r\n        //判断twoList\r\n        if(pokerList.length >= 6 && pokerList.length%2 === 0 && Count2List.length === pokerList.length/2 && pokerList[0].number+pokerList.length/2-1===pokerList[pokerList.length-1].number){\r\n            return {\r\n                type:'twoList',\r\n                poker: pokerList,\r\n                list: Count2List.map(function (item) {\r\n                    return {\r\n                        two: item,\r\n                    }\r\n                }),\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    static pokerListToString(pokerList){\r\n        let result = '';\r\n        for(let i=0; i<pokerList.length; i++){\r\n            let str = pokerList[i].toString();\r\n            result += str;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    toString(){\r\n        return this.text;\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var src_Poker = (Poker);\n// CONCATENATED MODULE: ./src/Player.js\n\r\n\r\nclass Player_Player{\r\n    constructor(param) {\r\n        param = param || {};\r\n        this.pokerList = [];\r\n        this.name = param.name || 'noName'+Math.random();\r\n        this.type = param.type || 'nongmin';\r\n        this.last = null;\r\n        this.next = null;\r\n        this.isRobot = param.isRobot;\r\n        this.game = param.game;\r\n        \r\n        this.lastSendObj = null;\r\n    }\r\n\r\n    addPoker(poker){\r\n        this.pokerList.push(poker);\r\n    }\r\n\r\n    sortPoker(){\r\n        this.pokerList.sort(this.sortFunction);\r\n    }\r\n\r\n    sortFunction(a, b){\r\n        return a.number - b.number;\r\n    }\r\n\r\n    getLastObj(){\r\n        let lastObj = this.last.lastSendObj;\r\n        if(!lastObj || lastObj.type === 'pass'){\r\n            lastObj = this.next.lastSendObj;\r\n            if(!lastObj || lastObj.type === 'pass'){\r\n                return false;\r\n            }\r\n        }\r\n        return lastObj;\r\n    }\r\n\r\n    playByAI(){\r\n\r\n        let lastObj = this.getLastObj();\r\n        if(lastObj){\r\n            this.playByObj(lastObj);\r\n        }else{\r\n            this.playByAllType();\r\n        }\r\n\r\n    }\r\n\r\n    sendPoker(obj){\r\n        this.game.clearDesk();\r\n        this.lastSendObj = obj;\r\n        this.game.deskPokerObj = obj;\r\n        this.game.next();\r\n    }\r\n\r\n    playByAllType(){\r\n        let types2 = ['one','two','threeWithOne','threeWithTwo','threeWithOneList','threeWithTwoList','oneList','twoList','four','sx','pass'];\r\n        let types = ['threeWithTwoList','threeWithOneList','twoList','threeWithTwo','oneList','threeWithOne','two','one','four','sx','pass'];\r\n        for(let i=0; i<types.length; i++){\r\n            let obj = this.getSmallestObjByType(types[i]);\r\n            if(obj){\r\n                let success = this.deleteFromPokerListAndSendByObj(obj);\r\n                if(!success){\r\n                    alert('error!');\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    deleteFromPokerListAndSendByObj(obj){\r\n        let tempList = [];\r\n        if(obj.type === 'pass'){\r\n            this.sendPoker(obj);\r\n            return true;\r\n        }\r\n        let pokerList = obj.poker;\r\n        for(let i=0; i<pokerList.length; i++){\r\n\r\n            let poker = this.getAndDeleteOnePokerByNumber(pokerList[i].number);\r\n            if(poker){\r\n                tempList.push(poker);\r\n            }else{\r\n                this.listBackToPokerList(tempList);\r\n                return false;\r\n            }\r\n        }\r\n        this.sendPoker(obj);\r\n        return true;\r\n    }\r\n\r\n    getSmallestObjByType(type){\r\n        let pokerList = this.pokerList;\r\n\r\n        let lastPoker = pokerList[0];\r\n        let curList = [lastPoker];\r\n        let lists = [];\r\n        for(let i=1; i<pokerList.length; i++){\r\n            if(pokerList[i].number !== lastPoker.number){\r\n                lists.push(curList);\r\n                curList = [pokerList[i]];\r\n            }else{\r\n                curList.push(pokerList[i]);\r\n            }\r\n            lastPoker = pokerList[i];\r\n        }\r\n        lists.push(curList);\r\n\r\n        let Count1List = [];\r\n        let Count2List = [];\r\n        let Count3List = [];\r\n        let Count4List = [];\r\n        for(let i=0; i<lists.length; i++){\r\n            if(lists[i].length === 3){\r\n                Count3List.push(lists[i]);\r\n            }else if(lists[i].length === 2){\r\n                Count2List.push(lists[i]);\r\n            }else if(lists[i].length === 1){\r\n                Count1List.push(lists[i]);\r\n            }else if(lists[i].length === 4){\r\n                Count4List.push(lists[i]);\r\n            }\r\n        }\r\n\r\n        let obj = null;\r\n        if(type === 'one'){\r\n            if(Count1List.length>0){\r\n                obj = {\r\n                    type: type,\r\n                    poker: Count1List[0],\r\n                    one: Count1List[0],\r\n                };\r\n            }else if(Count2List.length>0){\r\n                let poker = Count2List[0].slice(0,1);\r\n                obj = {\r\n                    type: type,\r\n                    poker: poker,\r\n                    one: poker,\r\n                };\r\n            }else if(Count3List.length>0){\r\n                let poker = Count3List[0].slice(0,1);\r\n                obj = {\r\n                    type: type,\r\n                    poker: poker,\r\n                    one: poker,\r\n                };\r\n            }\r\n        }else if(type === 'two'){\r\n            if(Count2List.length>0){\r\n                obj = {\r\n                    type: type,\r\n                    poker: Count2List[0],\r\n                    two: Count2List[0],\r\n                };\r\n            }else if(Count3List.length>0){\r\n                let poker = Count3List[0].slice(0,2);\r\n                obj = {\r\n                    type: type,\r\n                    poker: poker,\r\n                    one: poker,\r\n                };\r\n            }\r\n        }else if(type === 'threeWithOne'){\r\n            if(Count3List.length>0){\r\n                let one;\r\n                if(Count1List.length>0){\r\n                    one = Count1List[0];\r\n                }else if(Count2List.length>0){\r\n                    one = Count2List[0].slice(0,1);\r\n                }else if(Count3List.length>0){\r\n                    for(let j=0; j<Count3List.length; j++){\r\n                        if(j===0){\r\n                            continue;\r\n                        }\r\n                        one = Count3List[j].slice(0,1);\r\n                    }\r\n                }\r\n\r\n                if(one){\r\n                    obj = {\r\n                        type: type,\r\n                        poker: Count3List[0].concat(one),\r\n                        three: Count3List[0],\r\n                        one: one,\r\n                    };\r\n                }\r\n            }\r\n        }else if(type === 'four'){\r\n            if(Count4List.length>0){\r\n                obj = {\r\n                    type: type,\r\n                    poker: Count4List[0],\r\n                    four: Count4List[0],\r\n                };\r\n            }\r\n        }else if(type === 'threeWithTwo'){\r\n            if(Count3List.length>0){\r\n                let two;\r\n                if(Count2List.length>0){\r\n                    two = Count2List[0];\r\n                }else if(Count3List.length>0){\r\n                    for(let j=0; j<Count3List.length; j++){\r\n                        if(j===0){\r\n                            continue;\r\n                        }\r\n                        two = Count3List[j].slice(0,2);\r\n                    }\r\n                }\r\n\r\n                if(two){\r\n                    obj = {\r\n                        type: type,\r\n                        poker: Count3List[0].concat(two),\r\n                        three: Count3List[0],\r\n                        two: two,\r\n                    };\r\n                }\r\n            }\r\n        }else if(type === 'threeWithOneList'){\r\n            if(Count3List.length>1){\r\n                for(let i=0; i<Count3List.length-1; i++){\r\n                    if(Count3List[i][0].number+1===Count3List[i+1][0].number+1){\r\n\r\n                        let one1,one2;\r\n                        if(Count1List.length>0){\r\n                            one1 = Count1List[0];\r\n                            if(Count1List.length>1){\r\n                                one2 = Count1List[1];\r\n                            }else{\r\n                                if(Count2List.length>0){\r\n                                    one2 = Count2List[0].slice(0,1);\r\n                                }else if(Count3List.length>0){\r\n                                    for(let j=0; j<Count3List.length; j++){\r\n                                        if(j===i){\r\n                                            continue;\r\n                                        }\r\n                                        one2 = Count3List[j].slice(0,1);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }else if(Count2List.length>0){\r\n                            one1 = Count2List[0].slice(0,1);\r\n                            one2 = Count2List[0].slice(1,2);\r\n                        }else if(Count3List.length>0){\r\n                            for(let j=0; j<Count3List.length; j++){\r\n                                if(j===i){\r\n                                    continue;\r\n                                }\r\n                                one1 = Count3List[j].slice(0,1);\r\n                                one2 = Count3List[j].slice(1,2);\r\n                            }\r\n                        }\r\n\r\n                        if(one1&&one2){\r\n                            obj = {\r\n                                type: type,\r\n                                poker: Count3List[i].concat(one1).concat(Count3List[i+1]).concat(one2),\r\n                                list: [\r\n                                    {\r\n                                        three: Count3List[i],\r\n                                        one: one1,\r\n                                    },\r\n                                    {\r\n                                        three: Count3List[i+1],\r\n                                        one: one2,\r\n                                    }\r\n                                ],\r\n                            };\r\n                        }\r\n                        break;\r\n\r\n                    }\r\n                }\r\n            }\r\n        }else if(type === 'threeWithTwoList'){\r\n            if(Count3List.length>1){\r\n                for(let i=0; i<Count3List.length-1; i++){\r\n                    if(Count3List[i][0].number+1===Count3List[i+1][0].number+1){\r\n\r\n                        let two1,two2;\r\n                        if(Count2List.length>0){\r\n                            two1 = Count2List[0];\r\n                            if(Count2List.length>1){\r\n                                two2 = Count2List[1];\r\n                            }else{\r\n                                for(let j=0; j<Count3List.length; j++){\r\n                                    if(j===i){\r\n                                        continue;\r\n                                    }\r\n                                    two2 = Count3List[j].slice(0,2);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if(two1&&two2){\r\n                            obj = {\r\n                                type: type,\r\n                                poker: Count3List[i].concat(two1).concat(Count3List[i+1]).concat(two2),\r\n                                list: [\r\n                                    {\r\n                                        three: Count3List[i],\r\n                                        two: two1,\r\n                                    },\r\n                                    {\r\n                                        three: Count3List[i+1],\r\n                                        two: two2,\r\n                                    }\r\n                                ],\r\n                            };\r\n                        }\r\n                        break;\r\n\r\n                    }\r\n                }\r\n            }\r\n        }else if(type === 'oneList'){\r\n            if(Count1List.length>=5 ){\r\n                for(let i=0; i<Count1List.length-5+1; i++){\r\n                    if(Count1List[i][0].number+5-1===Count1List[i+5-1][0].number){\r\n                        let list = Count1List.slice(i,i+5);\r\n                        obj = {\r\n                            type: type,\r\n                            poker: list.flat(1),\r\n                            list: list.map(function (item) {\r\n                                return {\r\n                                    one: item,\r\n                                }\r\n                            }),\r\n                        };\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }else if(type === 'twoList'){\r\n            if(Count2List.length>=3 ){\r\n                for(let i=0; i<Count2List.length-3+1; i++){\r\n                    if(Count2List[i][0].number+3-1===Count2List[i+3-1][0].number){\r\n                        let list = Count2List.slice(i,i+3);\r\n                        obj = {\r\n                            type: type,\r\n                            poker: list.flat(1),\r\n                            list: list.map(function (item) {\r\n                                return {\r\n                                    two: item,\r\n                                }\r\n                            }),\r\n                        };\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }else if(type === 'sx'){\r\n            if(Count1List.length>=2){\r\n                for(let i=0; i<Count1List.length-1; i++){\r\n                    if(Count1List[i][0].number===16){\r\n                        let list = Count2List.slice(i,i+2);\r\n                        let poker = list.flat(1);\r\n                        obj = {\r\n                            type: type,\r\n                            poker: poker,\r\n                            sx: poker,\r\n                        };\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }else if(type === 'pass'){\r\n            obj = {\r\n                type: type,\r\n                poker: ['pass'],\r\n            };\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    getObjByObj(lastObj){\r\n        let pokerList = this.pokerList;\r\n\r\n        let lastPoker = pokerList[0];\r\n        let curList = [lastPoker];\r\n        let lists = [];\r\n        for(let i=1; i<pokerList.length; i++){\r\n            if(pokerList[i].number !== lastPoker.number){\r\n                lists.push(curList);\r\n                curList = [pokerList[i]];\r\n            }else{\r\n                curList.push(pokerList[i]);\r\n            }\r\n            lastPoker = pokerList[i];\r\n        }\r\n        lists.push(curList);\r\n\r\n        let Count1List = [];\r\n        let Count2List = [];\r\n        let Count3List = [];\r\n        let Count4List = [];\r\n        for(let i=0; i<lists.length; i++){\r\n            if(lists[i].length === 3){\r\n                Count3List.push(lists[i]);\r\n            }else if(lists[i].length === 2){\r\n                Count2List.push(lists[i]);\r\n            }else if(lists[i].length === 1){\r\n                Count1List.push(lists[i]);\r\n            }else if(lists[i].length === 4){\r\n                Count4List.push(lists[i]);\r\n            }\r\n        }\r\n\r\n        let type = lastObj.type;\r\n        let obj = null;\r\n        if(type === 'one'){\r\n            if(Count1List.length>0){\r\n                for(let i=0; i<Count1List.length; i++){\r\n                    if(Count1List[i][0].number>lastObj.one[0].number){\r\n                        obj = {\r\n                            type: type,\r\n                            poker: Count1List[i],\r\n                            one: Count1List[i],\r\n                        };\r\n                        break;\r\n                    }\r\n                }\r\n            }else if(Count2List.length>0){\r\n                for(let i=0; i<Count2List.length; i++){\r\n                    if(Count2List[i][0].number>lastObj.one[0].number){\r\n                        let poker = Count2List[i].slice(0,1);\r\n                        obj = {\r\n                            type: type,\r\n                            poker: poker,\r\n                            one: poker,\r\n                        };\r\n                        break;\r\n                    }\r\n                }\r\n            }else if(Count3List.length>0){\r\n                for(let i=0; i<Count3List.length; i++){\r\n                    if(Count3List[i][0].number>lastObj.one[0].number){\r\n                        let poker = Count3List[i].slice(0,1);\r\n                        obj = {\r\n                            type: type,\r\n                            poker: poker,\r\n                            one: poker,\r\n                        };\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }else if(type === 'two'){\r\n            if(Count2List.length>0){\r\n                for(let i=0; i<Count2List.length; i++){\r\n                    if(Count2List[i][0].number>lastObj.two[0].number){\r\n                        obj = {\r\n                            type: type,\r\n                            poker: Count2List[i],\r\n                            two: Count2List[i],\r\n                        };\r\n                        break;\r\n                    }\r\n                }\r\n            }else if(Count3List.length>0){\r\n                for(let i=0; i<Count3List.length; i++){\r\n                    if(Count3List[i][0].number>lastObj.two[0].number){\r\n                        let poker = Count3List[i].slice(0,2);\r\n                        obj = {\r\n                            type: type,\r\n                            poker: poker,\r\n                            one: poker,\r\n                        };\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }else if(type === 'threeWithOne'){\r\n            if(Count3List.length>0){\r\n                for(let i=0; i<Count3List.length; i++){\r\n                    if(Count3List[i][0].number>lastObj.three[0].number){\r\n\r\n                        let one;\r\n                        if(Count1List.length>0){\r\n                            one = Count1List[0];\r\n                        }else if(Count2List.length>0){\r\n                            one = Count2List[0].slice(0,1);\r\n                        }else if(Count3List.length>0){\r\n                            for(let j=0; j<Count3List.length; j++){\r\n                                if(j===i){\r\n                                    continue;\r\n                                }\r\n                                one = Count3List[j].slice(0,1);\r\n                            }\r\n                        }\r\n\r\n                        if(one){\r\n                            obj = {\r\n                                type: type,\r\n                                poker: Count3List[i].concat(one),\r\n                                three: Count3List[i],\r\n                                one: one,\r\n                            };\r\n                        }\r\n                        break;\r\n\r\n                    }\r\n                }\r\n            }\r\n        }else if(type === 'threeWithTwo'){\r\n            if(Count3List.length>0){\r\n                for(let i=0; i<Count3List.length; i++){\r\n                    if(Count3List[i][0].number>lastObj.three[0].number){\r\n\r\n                        let two;\r\n                        if(Count2List.length>0){\r\n                            two = Count2List[0];\r\n                        }else if(Count3List.length>0){\r\n                            for(let j=0; j<Count3List.length; j++){\r\n                                if(j===i){\r\n                                    continue;\r\n                                }\r\n                                two = Count3List[j].slice(0,2);\r\n                            }\r\n                        }\r\n\r\n                        if(two){\r\n                            obj = {\r\n                                type: type,\r\n                                poker: Count3List[i].concat(two),\r\n                                three: Count3List[i],\r\n                                two: two,\r\n                            };\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }else if(type === 'threeWithOneList'){\r\n            if(Count3List.length>1){\r\n                for(let i=0; i<Count3List.length-1; i++){\r\n                    if(Count3List[i][0].number>lastObj.list[0].three[0].number && Count3List[i][0].number+1===Count3List[i+1][0].number+1){\r\n\r\n                        let one1,one2;\r\n                        if(Count1List.length>0){\r\n                            one1 = Count1List[0];\r\n                            if(Count1List.length>1){\r\n                                one2 = Count1List[1];\r\n                            }else{\r\n                                if(Count2List.length>0){\r\n                                    one2 = Count2List[0].slice(0,1);\r\n                                }else if(Count3List.length>0){\r\n                                    for(let j=0; j<Count3List.length; j++){\r\n                                        if(j===i){\r\n                                            continue;\r\n                                        }\r\n                                        one2 = Count3List[j].slice(0,1);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }else if(Count2List.length>0){\r\n                            one1 = Count2List[0].slice(0,1);\r\n                            one2 = Count2List[0].slice(1,2);\r\n                        }else if(Count3List.length>0){\r\n                            for(let j=0; j<Count3List.length; j++){\r\n                                if(j===i){\r\n                                    continue;\r\n                                }\r\n                                one1 = Count3List[j].slice(0,1);\r\n                                one2 = Count3List[j].slice(1,2);\r\n                            }\r\n                        }\r\n\r\n                        if(one1&&one2){\r\n                            obj = {\r\n                                type: type,\r\n                                poker: Count3List[i].concat(one1).concat(Count3List[i+1]).concat(one2),\r\n                                list: [\r\n                                    {\r\n                                        three: Count3List[i],\r\n                                        one: one1,\r\n                                    },\r\n                                    {\r\n                                        three: Count3List[i+1],\r\n                                        one: one2,\r\n                                    }\r\n                                ],\r\n                            };\r\n                        }\r\n                        break;\r\n\r\n                    }\r\n                }\r\n            }\r\n        }else if(type === 'threeWithTwoList'){\r\n            if(Count3List.length>1){\r\n                for(let i=0; i<Count3List.length-1; i++){\r\n                    if(Count3List[i][0].number>lastObj.list[0].three[0].number && Count3List[i][0].number+1===Count3List[i+1][0].number+1){\r\n\r\n                        let two1,two2;\r\n                        if(Count2List.length>0){\r\n                            two1 = Count2List[0];\r\n                            if(Count2List.length>1){\r\n                                two2 = Count2List[1];\r\n                            }else{\r\n                                for(let j=0; j<Count3List.length; j++){\r\n                                    if(j===i){\r\n                                        continue;\r\n                                    }\r\n                                    two2 = Count3List[j].slice(0,2);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if(two1&&two2){\r\n                            obj = {\r\n                                type: type,\r\n                                poker: Count3List[i].concat(two1).concat(Count3List[i+1]).concat(two2),\r\n                                list: [\r\n                                    {\r\n                                        three: Count3List[i],\r\n                                        two: two1,\r\n                                    },\r\n                                    {\r\n                                        three: Count3List[i+1],\r\n                                        two: two2,\r\n                                    }\r\n                                ],\r\n                            };\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }else if(type === 'oneList'){\r\n            if(Count1List.length>=lastObj.list.length ){\r\n                for(let i=0; i<Count1List.length-lastObj.list.length+1; i++){\r\n                    if(Count1List[i][0].number>lastObj.list[0].one[0].number && Count1List[i][0].number+lastObj.list.length-1===Count1List[i+lastObj.list.length-1][0].number){\r\n                        let list = Count1List.slice(i,i+lastObj.list.length);\r\n                        obj = {\r\n                            type: type,\r\n                            poker: list.flat(1),\r\n                            list: list.map(function (item) {\r\n                                return {\r\n                                    one: item,\r\n                                }\r\n                            }),\r\n                        };\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }else if(type === 'twoList'){\r\n            if(Count2List.length>=lastObj.list.length ){\r\n                for(let i=0; i<Count2List.length-lastObj.list.length+1; i++){\r\n                    if(Count2List[i][0].number>lastObj.list[0].two[0].number && Count2List[i][0].number+lastObj.list.length-1===Count2List[i+lastObj.list.length-1][0].number){\r\n                        let list = Count2List.slice(i,i+lastObj.list.length);\r\n                        obj = {\r\n                            type: type,\r\n                            poker: list.flat(1),\r\n                            list: list.map(function (item) {\r\n                                return {\r\n                                    two: item,\r\n                                }\r\n                            }),\r\n                        };\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }else if(type === 'four'){\r\n            if(Count4List.length>0){\r\n                for(let i=0; i<Count4List.length; i++){\r\n                    if(Count4List[i][0].number>lastObj.four[0].number){\r\n                        obj = {\r\n                            type: type,\r\n                            poker: Count4List[i],\r\n                            four: Count4List[i],\r\n                        };\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!obj && type!=='four'){\r\n\r\n            if(Count4List.length>0){\r\n                obj = {\r\n                    type: type,\r\n                    poker: Count4List[0],\r\n                    four: Count4List[0],\r\n                };\r\n            }\r\n\r\n        }\r\n\r\n        if(!obj && type!=='sx'){\r\n\r\n            if(Count1List.length>1){\r\n                if(Count1List[Count1List.length-2] === 16){\r\n                    let poker = Count1List[Count1List.length-2].concat(Count1List[Count1List.length-1]);\r\n                    obj = {\r\n                        type: type,\r\n                        poker: poker,\r\n                        sx: poker,\r\n                    };\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        if(!obj){\r\n            obj = {\r\n                type: 'pass',\r\n                poker: ['pass'],\r\n            };\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    playByObj(lastObj){\r\n\r\n        let obj = this.getObjByObj(lastObj);\r\n        let success = this.deleteFromPokerListAndSendByObj(obj);\r\n        if(!success){\r\n            alert('error!');\r\n        }\r\n\r\n    }\r\n\r\n    getListByString(str){\r\n        let tempList = [];\r\n        if(str === 'pass'){\r\n            return ['pass'];\r\n        }\r\n        for(let i=0; i<str.length; i++){\r\n            let text = str[i];\r\n            let number = src_Poker.textToNumber(text);\r\n            let poker = this.getAndDeleteOnePokerByNumber(number);\r\n            if(poker){\r\n                tempList.push(poker);\r\n            }else{\r\n                this.listBackToPokerList(tempList);\r\n                return false;\r\n            }\r\n        }\r\n        return tempList;\r\n    }\r\n\r\n    listBackToPokerList(list){\r\n        while (list.length>0){\r\n            let poker = list.splice(0,1)[0];\r\n            this.pokerList.push(poker);\r\n        }\r\n        this.sortPoker();\r\n    }\r\n\r\n    playByString(str){\r\n        let list = this.getListByString(str);\r\n        if(list){\r\n            let obj = src_Poker.getObjByPokerList(list);\r\n            if(obj){\r\n                if(obj.type === 'pass'){\r\n                    this.sendPoker(obj);\r\n                    return true;\r\n                }\r\n                let lastObj = this.getLastObj();\r\n                if(lastObj){\r\n                    if(lastObj.type === obj.type){\r\n                        let comp = this.compareTwoObj(obj, lastObj);\r\n                        if(comp){\r\n                            this.sendPoker(obj);\r\n                            return true;\r\n                        }else{\r\n                            this.listBackToPokerList(list);\r\n                            alert('have to bigger than '+src_Poker.pokerListToString(lastObj.poker));\r\n                            return false;\r\n                        }\r\n\r\n                    }else{\r\n                        this.listBackToPokerList(list);\r\n                        alert('type is not '+lastObj.type+'!');\r\n                        return false;\r\n                    }\r\n                }else{\r\n                    this.sendPoker(obj);\r\n                    return true;\r\n                }\r\n\r\n            }else{\r\n                this.listBackToPokerList(list);\r\n                alert('type error!');\r\n                return false;\r\n            }\r\n\r\n        }else{\r\n            alert('poker error!');\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    compareTwoObj(obj1, obj2) {\r\n        if (obj1.type === 'one') {\r\n            return obj1.one[0].number > obj2.one[0].number;\r\n        } else if (obj1.type === 'two') {\r\n            return obj1.two[0].number > obj2.two[0].number;\r\n        } else if (obj1.type === 'threeWithOne') {\r\n            return obj1.three[0].number > obj2.three[0].number;\r\n        } else if (obj1.type === 'threeWithTwo') {\r\n            return obj1.three[0].number > obj2.three[0].number;\r\n        } else if (obj1.type === 'threeWithOneList') {\r\n            return obj1.list[0].three[0].number > obj2.list[0].three[0].number;\r\n        } else if (obj1.type === 'threeWithTwoList') {\r\n            return obj1.list[0].three[0].number > obj2.list[0].three[0].number;\r\n        } else if (obj1.type === 'oneList') {\r\n            return obj1.list[0].one[0].number > obj2.list[0].one[0].number;\r\n        } else if (obj1.type === 'twoList') {\r\n            return obj1.list[0].two[0].number > obj2.list[0].two[0].number;\r\n        } else if (obj1.type === 'four') {\r\n            return obj1.four[0].number > obj2.four[0].number;\r\n        }\r\n    }\r\n\r\n\r\n    getAndDeleteOnePokerByNumber(number){\r\n        for(let i=0; i<this.pokerList.length; i++){\r\n            if(this.pokerList[i].number === number){\r\n                return this.pokerList.splice(i,1)[0];\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    pokerListToString(){\r\n        let result = src_Poker.pokerListToString(this.pokerList);\r\n        return result;\r\n    }\r\n\r\n    lastSendObjToString(){\r\n        if(!this.lastSendObj){\r\n            return '';\r\n        }\r\n        let result = src_Poker.pokerListToString(this.lastSendObj.poker);\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var src_Player = (Player_Player);\n// CONCATENATED MODULE: ./src/Game.js\n\r\n\r\n\r\nclass Game_Game{\r\n    constructor() {\r\n        this.playerList = [];\r\n        this.pokerList = [];\r\n        this.deskPokerObj = null;\r\n        this.oldPokerList = [];\r\n        this.currentPlayer = [];\r\n        this.dizhu = null;\r\n\r\n        this.init();\r\n    }\r\n\r\n    init(){\r\n        this.initPokerList();\r\n        this.initPlayerList();\r\n        this.sendPoker();\r\n\r\n        this.start();\r\n    }\r\n\r\n    start(){\r\n        this.currentPlayer = this.dizhu;\r\n        if(this.currentPlayer.isRobot){\r\n            this.currentPlayer.playByAI();\r\n        }\r\n    }\r\n\r\n    next(){\r\n        let over = this.checkGameOver();\r\n        if(over){\r\n            this.gameOver();\r\n            return;\r\n        }\r\n        this.currentPlayer = this.currentPlayer.next;\r\n        if(this.currentPlayer.isRobot){\r\n            this.currentPlayer.playByAI();\r\n        }\r\n    }\r\n\r\n    gameOver(){\r\n        alert('gameOver! '+this.currentPlayer.name+' ['+this.currentPlayer.type+'] win!');\r\n    }\r\n\r\n    checkGameOver(){\r\n        if(this.currentPlayer.pokerList.length === 0) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    clearDesk(){\r\n        if(this.deskPokerObj){\r\n            this.oldPokerList.push(this.deskPokerObj);\r\n            this.deskPokerObj = null;\r\n        }\r\n    }\r\n\r\n    sendPoker(){\r\n        let player = this.playerList[0];\r\n        do{\r\n            let index = this.getRandomIntInclusive(0,this.pokerList.length-1);\r\n            let poker = this.pokerList.splice(index,1)[0];\r\n            player.addPoker(poker);\r\n            player = player.next;\r\n        }while(this.pokerList.length>3);\r\n\r\n        do{\r\n            let poker = this.pokerList.splice(0,1)[0];\r\n            this.dizhu.addPoker(poker);\r\n        }while(this.pokerList.length>0);\r\n\r\n        for(let i=0; i<this.playerList.length; i++){\r\n            this.playerList[i].sortPoker();\r\n        }\r\n    }\r\n\r\n    initPlayerList(){\r\n        this.playerList = [];\r\n        let player0 = new src_Player({\r\n            name: 'player',\r\n            isRobot: false,\r\n            game: this,\r\n        });\r\n        let player1 = new src_Player({\r\n            name: 'robot1',\r\n            isRobot: true,\r\n            game: this,\r\n        });\r\n        let player2 = new src_Player({\r\n            name: 'robot2',\r\n            isRobot: true,\r\n            game: this,\r\n        });\r\n        this.playerList = [player0,player1,player2];\r\n\r\n        this.playerList[0].next = this.playerList[1];\r\n        this.playerList[1].next = this.playerList[2];\r\n        this.playerList[2].next = this.playerList[0];\r\n        this.playerList[0].last = this.playerList[2];\r\n        this.playerList[1].last = this.playerList[0];\r\n        this.playerList[2].last = this.playerList[1];\r\n\r\n        let dizhuIndex = this.getRandomIntInclusive(0,2);\r\n        this.playerList[dizhuIndex].type = 'dizhu';\r\n        this.dizhu = this.playerList[dizhuIndex];\r\n    }\r\n\r\n    initPokerList(){\r\n        this.pokerList = [];\r\n        for(let number=3; number<=15; number++){\r\n            for(let type=0; type<4; type++){\r\n                let poker = new src_Poker({\r\n                    number: number,\r\n                    type: type,\r\n                });\r\n                this.pokerList.push(poker);\r\n            }\r\n        }\r\n        for(let number=16; number<=17; number++){\r\n            let poker = new src_Poker({\r\n                number: number,\r\n            });\r\n            this.pokerList.push(poker);\r\n        }\r\n\r\n    }\r\n\r\n    pokerListToString(){\r\n        let result = '';\r\n        result += src_Poker.pokerListToString(this.pokerList);\r\n        result += '\\n';\r\n        for(let i=0; i<this.oldPokerList.length; i++){\r\n            result += src_Poker.pokerListToString(this.oldPokerList[i].poker);\r\n            if(i<this.oldPokerList.length-1){\r\n                result += ',';\r\n            }\r\n        }\r\n        result += '\\n';\r\n        result += this.deskPokerObj?src_Poker.pokerListToString(this.deskPokerObj.poker):'';\r\n        return result;\r\n    }\r\n\r\n    getRandomIntInclusive(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n}\r\n\r\n/* harmony default export */ var src_Game = (Game_Game);\n// CONCATENATED MODULE: ./src/main.js\n\r\n\r\nlet Doudizhu = {};\r\nDoudizhu.Game = src_Game;\r\n\r\nwindow.Doudizhu = Doudizhu;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);